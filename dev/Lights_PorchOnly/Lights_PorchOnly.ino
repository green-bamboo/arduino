#include <Adafruit_NeoPixel.h>
#include <RCSwitch.h>

#define FIRST			1
#define LAST			21

#define BUTTONOFF		10367240 
#define BUTTON1ON		10367247 
#define BUTTON1OFF		10367247 
#define BUTTON2ON		10367247 
#define BUTTON2OFF		10367247 
#define BUTTON3ON		10367247 
#define BUTTON3OFF		10367247 
#define BUTTON4ON		10367247 
#define BUTTON4OFF		10367247 

#define PIN_NEOPORCH	8
#define PIN_LED			13

#define MIN				0
#define LOW				20
#define MAX				60
#define STARBURST_MAX	30

#define PORCH_PIXELS	450

Adafruit_NeoPixel porch = Adafruit_NeoPixel(PORCH_PIXELS, PIN_NEOPORCH, NEO_RGB + NEO_KHZ800);

unsigned long currentMillis = 0;
unsigned long previousMillis = 0;
unsigned long previousRadio = 0;
unsigned long previousTree = 0;
unsigned long previousPorch = 0;
unsigned long previousLED = 0;
unsigned long sceneMillis = 0;
unsigned long SceneLength = 30 * 1000; // 20 seconds for scene

int gap = 120;

int ledCounter = 0;
int currentAct = 101;
int previousAct = -1;
int currentScene = 19;
int previousScene = 0;
int sceneDir = 0;
int stage = 0;
int position = 0;
int counter = 0;
int last = 0;

int treeCounter = 0;
int treeDir = 0;
int treeStage = 0;

int porchCounter = 0;
int porchDir = 0;
int porchStage = 0;
int porchX = 0;
int porchY = 0;
int porchXdir = 0;
int porchYdir = 0;


int porchColour = 0;
int porchBrightness = 0;

//int porchStars[8][10] =
//{
//	{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 },
//	{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 },
//	{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 },
//	{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 },
//	{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 },
//	{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 },
//	{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 },
//	{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 }
//};


// Virtual
// 8				400	401	402	403	404	405	406	407	408	409	410	411	412	413	414	415	416	417	418	419	420	421	422	423	424	425	426	427	428	429	430	431	432	433	434	435	436	437	438	439	440	441	442	443	444	445	446	447	448	449
// 7				350	351	352	353	354	355	356	357	358	359	360	361	362	363	364	365	366	367	368	369	370	371	372	373	374	375	376	377	378	379	380	381	382	383	384	385	386	387	388	389	390	391	392	393	394	395	396	397	398	399
// 6				300	301	302	303	304	305	306	307	308	309	310	311	312	313	314	315	316	317	318	319	320	321	322	323	324	325	326	327	328	329	330	331	332	333	334	335	336	337	338	339	340	341	342	343	344	345	346	347	348	349
// 5				250	251	252	253	254	255	256	257	258	259	260	261	262	263	264	265	266	267	268	269	270	271	272	273	274	275	276	277	278	279	280	281	282	283	284	285	286	287	288	289	290	291	292	293	294	295	296	297	298	299
// 4				200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249
// 3				150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199
// 2				100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149
// 1				050	051	052	053	054	055	056	057	058	059	060	061	062	063	064	065	066	067	068	069	070	071	072	073	074	075	076	077	078	079	080	081	082	083	084	085	086	087	088	089	090	091	092	093	094	095	096	097	098	099
// 0				000	001	002	003	004	005	006	007	008	009	010	011	012	013	014	015	016	017	018	019	020	021	022	023	024	025	026	027	028	029	030	031	032	033	034	035	036	037	038	039	040	041	042	043	044	045	046	047	048	049

// Physical
// 8  449 400  <	449	448	447	446	445	444	443	442	441	440	439	438	437	436	435	434	433	432	431	430	429	428	427	426	425	424	423	422	421	420	419	418	417	416	415	414	413	412	411	410	409	408	407	406	405	404	403	402	401	400
// 7  350 399  >	350	351	352	353	354	355	356	357	358	359	360	361	362	363	364	365	366	367	368	369	370	371	372	373	374	375	376	377	378	379	380	381	382	383	384	385	386	387	388	389	390	391	392	393	394	395	396	397	398	399
// 6  349 300  <	349	348	347	346	345	344	343	342	341	340	339	338	337	336	335	334	333	332	331	330	329	328	327	326	325	324	323	322	321	320	319	318	317	316	315	314	313	312	311	310	309	308	307	306	305	304	303	302	301	300
// 5  250 299  >	250	251	252	253	254	255	256	257	258	259	260	261	262	263	264	265	266	267	268	269	270	271	272	273	274	275	276	277	278	279	280	281	282	283	284	285	286	287	288	289	290	291	292	293	294	295	296	297	298	299
// 4  249 200  <	249	248	247	246	245	244	243	242	241	240	239	238	237	236	235	234	233	232	231	230	229	228	227	226	225	224	223	222	221	220	219	218	217	216	215	214	213	212	211	210	209	208	207	206	205	204	203	202	201	200
// 3  150 199  >	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199
// 2  149 100  <	149	148	147	146	145	144	143	142	141	140	139	138	137	136	135	134	133	132	131	130	129	128	127	126	125	124	123	122	121	120	119	118	117	116	115	114	113	112	111	110	109	108	107	106	105	104	103	102	101	100
// 1  050 099  >	050	051	052	053	054	055	056	057	058	059	060	061	062	063	064	065	066	067	068	069	070	071	072	073	074	075	076	077	078	079	080	081	082	083	084	085	086	087	088	089	090	091	092	093	094	095	096	097	098	099
// 0  049 000  <	049	048	047	046	045	044	043	042	041	040	039	038	037	036	035	034	033	032	031	030	029	028	027	026	025	024	023	022	021	020	019	018	017	016	015	014	013	012	011	010	009	008	007	006	005	004	003	002	001	000

//
//byte patternMerry[9][50] = // Merry
//{
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 9, 0, 9, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 9, 9, 9, 9, 9, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 9, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 9, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 9, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//};

//byte patternChristmas[9][50] = // Christmas
//{
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//};

//byte patternClear[9][50] =
//{
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//};

//byte patternTree[9][50] =
//{
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//};

//byte patternShimmer[9][50] =
//{
//	{ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50 },
//	{ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51 },
//	{ 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52 },
//	{ 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53 },
//	{ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54 },
//	{ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55 },
//	{ 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56 },
//	{ 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 },
//	{ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58 },
//};

//byte patternDropping[9][50] =
//{
//	{ 7, 7, 7, 7, 7, 19, 19, 19, 19, 19, 1, 1, 1, 1, 1, 13, 13, 13, 13, 13, 28, 28, 28, 28, 28, 22, 22, 22, 22, 22, 10, 10, 10, 10, 10, 25, 25, 25, 25, 25, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16 },
//	{ 8, 8, 8, 8, 8, 20, 20, 20, 20, 20, 2, 2, 2, 2, 2, 14, 14, 14, 14, 14, 29, 29, 29, 29, 29, 23, 23, 23, 23, 23, 11, 11, 11, 11, 11, 26, 26, 26, 26, 26, 5, 5, 5, 5, 5, 17, 17, 17, 17, 17 },
//	{ 9, 9, 9, 9, 9, 21, 21, 21, 21, 21, 3, 3, 3, 3, 3, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 24, 24, 24, 24, 24, 12, 12, 12, 12, 12, 27, 27, 27, 27, 27, 6, 6, 6, 6, 6, 18, 18, 18, 18, 18 },
//	{ 10, 10, 10, 10, 10, 22, 22, 22, 22, 22, 4, 4, 4, 4, 4, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 25, 25, 25, 25, 25, 13, 13, 13, 13, 13, 28, 28, 28, 28, 28, 7, 7, 7, 7, 7, 19, 19, 19, 19, 19 },
//	{ 11, 11, 11, 11, 11, 23, 23, 23, 23, 23, 5, 5, 5, 5, 5, 17, 17, 17, 17, 17, 32, 32, 32, 32, 32, 26, 26, 26, 26, 26, 14, 14, 14, 14, 14, 29, 29, 29, 29, 29, 8, 8, 8, 8, 8, 20, 20, 20, 20, 20 },
//	{ 12, 12, 12, 12, 12, 24, 24, 24, 24, 24, 6, 6, 6, 6, 6, 18, 18, 18, 18, 18, 33, 33, 33, 33, 33, 27, 27, 27, 27, 27, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 9, 9, 9, 9, 9, 21, 21, 21, 21, 21 },
//	{ 13, 13, 13, 13, 13, 25, 25, 25, 25, 25, 7, 0, 7, 7, 7, 19, 19, 19, 19, 19, 34, 34, 34, 34, 34, 28, 28, 28, 28, 28, 16, 16, 16, 16, 16, 31, 31, 31, 31, 31, 10, 10, 10, 10, 10, 22, 22, 22, 22, 22 },
//	{ 14, 14, 14, 14, 14, 26, 26, 26, 26, 26, 8, 8, 8, 8, 8, 20, 20, 20, 20, 20, 35, 35, 35, 35, 35, 29, 29, 29, 29, 29, 17, 17, 17, 17, 17, 32, 32, 32, 32, 32, 11, 11, 11, 11, 11, 23, 23, 23, 23, 23 },
//	{ 15, 15, 15, 15, 15, 27, 27, 27, 27, 27, 9, 9, 9, 9, 9, 21, 21, 21, 21, 21, 36, 36, 36, 36, 36, 30, 30, 30, 30, 30, 18, 18, 18, 18, 18, 33, 33, 33, 33, 33, 12, 12, 12, 12, 12, 24, 24, 24, 24, 24 }
//
//};

byte patternSleigh[9][50] =
{
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0 },
	{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 0 }
};


//byte patternBoxes[9][50] =
//{
//	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
//	{ 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 },
//	{ 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1 },
//	{ 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 1 },
//	{ 1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 3, 2, 1 },
//	{ 1, 2, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 2, 1 },
//	{ 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 1 },
//	{ 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1 },
//	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 }
//};


//uint16_t patternSpiral[9][50] =
//{
//	{ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58 },
//	{ 8, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 59 },
//	{ 7, 120, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 169, 60 },
//	{ 6, 119, 224, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 271, 170, 61 },
//	{ 5, 118, 223, 320, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 365, 272, 171, 62 },
//	{ 4, 117, 222, 319, 408, 407, 406, 405, 404, 403, 402, 401, 400, 399, 398, 397, 396, 395, 394, 393, 392, 391, 390, 389, 388, 387, 386, 385, 384, 383, 382, 381, 380, 379, 378, 377, 376, 375, 374, 373, 372, 371, 370, 369, 368, 367, 366, 273, 172, 63 },
//	{ 3, 116, 221, 318, 317, 316, 315, 314, 313, 312, 311, 310, 309, 308, 307, 306, 305, 304, 303, 302, 301, 300, 299, 298, 297, 296, 295, 294, 293, 292, 291, 290, 289, 288, 287, 286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 17, 64 },
//	{ 2, 115, 220, 219, 218, 217, 216, 215, 214, 213, 212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 174, 65 },
//	{ 1, 114, 113, 112, 111, 110, 109, 108, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 88, 87, 86, 85, 84, 83, 82, 81, 80, 79, 78, 77, 76, 75, 74, 73, 72, 71, 70, 69, 68, 67, 66 }
//};


//	{ 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
//	{ 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },




uint32_t black;
uint32_t white;

RCSwitch mySwitch = RCSwitch();


/*

Left		  1 - 150	150
bay left	151 - 176	 26
bay front	176 - 267	 91
bay right	267 - 289	 22
bathroom	293 - 362	 69
right		362 - 450	 88

*/

void setup()
{
	Serial.begin(9600);
	pinMode(PIN_LED, OUTPUT);
	digitalWrite(PIN_LED, LOW);

	mySwitch.enableReceive(0);  // Receiver on inerrupt 0 => that is pin #2

	porch.begin();

	randomSeed(analogRead(2) + analogRead(4) + millis());

	Serial.println("Ready, PorchOnly v0.9");

	SetStrips(0, 0, 0);
	ShowStrips();

	previousLED = millis();
} // setup ****************************************************************************************************************************************************************************************************************************



void loop()
{

	currentMillis = millis();

	// Heart beat LED

	if (currentMillis - previousLED > 100)
	{
		previousLED = currentMillis;

		if (++ledCounter > 10)
		{
			Serial.println("Tick");
			ledCounter = 0;
		}

		if (ledCounter == 1 || ledCounter == 3)
			digitalWrite(PIN_LED, HIGH);
		else
			digitalWrite(PIN_LED, LOW);

	}

	// check for serial comms

	if (Serial.available() > 0)
	{

		int input = Serial.parseInt();

		if (input >= 0 && input < 1001)
		{
			NextScene();
			currentScene = input;
		}
	}

	// check for radio comms

	if (mySwitch.available())
	{

		int value = mySwitch.getReceivedValue();

		if (value == 0)
		{
			Serial.print("Unknown encoding");
		}
		else
		{
			unsigned long received = mySwitch.getReceivedValue();

			Serial.print("Received ");
			Serial.println(received);

			if (received == BUTTONOFF)
			{
				currentScene = 0;

				if (porchColour == 0 && porchBrightness == 0)
				{
					porchColour = 1;
					porchBrightness = 80;
				}
				else
				{
					porchColour = 0;
					porchBrightness = 0;
				}
			}

			else if (received == BUTTON1ON)
			{
				NextScene();
				currentScene--;
			}
			else if (received == BUTTON1OFF)
			{
				NextScene();
				currentScene++;
			}

			else if (received == BUTTON2ON)
			{
				NextScene();
				currentScene = FIRST;
			}
			else if (received == BUTTON2OFF)
			{
				NextScene();
				currentScene = LAST;
			}

			else if (received == BUTTON3ON)
			{
				NextScene();
				currentScene = 0;
				porchColour--;
			}
			else if (received == BUTTON3OFF)
			{
				NextScene();
				currentScene = 0;
				porchColour++;
			}

			else if (received == BUTTON4ON)
			{
				NextScene();
				currentScene = 0;
				porchBrightness--;
			}
			else if (received == BUTTON4OFF)
			{
				NextScene();
				currentScene = 0;
				porchBrightness++;
			}

			Serial.print("Scene ");
			Serial.println(currentScene);

			if (porchBrightness > 0)
			{
				Serial.print("Brightness");
				Serial.println(porchBrightness);
			}

		}

		mySwitch.resetAvailable();
	}

	//

	//	if (currentMillis - previousRadio < 3)
	//		return;

	//	previousRadio = currentMillis;

	//

	previousAct = 109;
	currentAct = 109;

	ManualControl();

	//

} // loop ***************************************************************************************************************************************************************************************************************************************


void SetColour(Adafruit_NeoPixel *strip, int red, int green, int blue)
{
	uint32_t colour = strip->Color(red, green, blue);

	for (int i = 0; i < strip->numPixels(); i++)
	{
		strip->setPixelColor(i, colour);
	}

} // SetColour ****************************************************************************************************************************************************************************************************************************


void SetColour(Adafruit_NeoPixel *strip, uint32_t colour)
{
	for (int i = 0; i < strip->numPixels(); i++)
	{
		strip->setPixelColor(i, colour);
	}

} // SetColour ****************************************************************************************************************************************************************************************************************************


void SetStrips(int red, int green, int blue)
{
	SetColour(&porch, red, green, blue);
} // SetStrips ****************************************************************************************************************************************************************************************************************************


void SetStripsBrightness(int level)
{
	porch.setBrightness(level);
} // SetStripsBrightness ****************************************************************************************************************************************************************************************************************************


void ShowStrips()
{
	porch.show();
} // ShowStrips ****************************************************************************************************************************************************************************************************************************


void ManualControl()
{

	if (currentScene != previousScene)
	{
		Serial.print("Scene ");
		Serial.print(currentScene);
		Serial.print(", (");
		Serial.print(previousScene);
		Serial.println(")");

		SetStrips(0, 0, 0);
	}

	if (currentScene == 0)
	{
		if (currentMillis - previousPorch > 100)
		{
			previousPorch = currentMillis;
			uint32_t colour = 0;

			if (porchColour == 1)
				colour = porch.Color(porchBrightness, 0, 0);
			else if (porchColour == 2)
				colour = porch.Color(0, porchBrightness, 0);
			else if (porchColour == 3)
				colour = porch.Color(0, 0, porchBrightness);
			else if (porchColour == 4)
				colour = porch.Color(porchBrightness, porchBrightness, porchBrightness);

			SetColour(&porch, colour);
			porch.show();
		}
	}
	else if (currentScene == FIRST)
	{
		PorchBerries();
	}
	else if (currentScene == 2)
	{
		PorchBlackOut();
	}
	else if (currentScene == 3)
	{
		PorchWhiteOut();
	}
	else if (currentScene == 4)
	{
		PorchBlockOut();
	}
	else if (currentScene == 5)
	{
		PorchDivider();
	}
	else if (currentScene == 6)
	{
		PorchFader();
	}
	else if (currentScene == 7)
	{
		PorchFingers();
	}
	else if (currentScene == 8)
	{
		PorchHorz();
	}
	else if (currentScene == 9)
	{
		PorchVert();
	}
	else if (currentScene == 10)
	{
		PorchRainbowAll();
	}
	else if (currentScene == 11)
	{
		PorchRainbowPixel();
	}
	else if (currentScene == 12)
	{
		PorchRainbowVert();
	}
	else if (currentScene == 13)
	{
		PorchSparkle();
	}
	else if (currentScene == 14)
	{
		PorchStarTurn();
	}
	else if (currentScene == 15)
	{
		PorchWave();
	}
	else if (currentScene == 16)
	{
		PorchWipe();
	}
	else if (currentScene == 17)
	{
		PorchSliders();
	}
	else if (currentScene == 18)
	{
		PorchSnow();
	}
	else if (currentScene == 19)
	{
		PorchCalibrate();
	}
	else if (currentScene == 20)
	{
		PorchBoxes();
	}
	else if (currentScene == LAST)
	{
		//PorchTree();
		//PorchShimmer();
		//PorchTree();
		//PorchDropping();
		//PorchSleigh();
		//PorchSpiral();
	}

	previousScene = currentScene;

} // ManualControl ***************************************************************************************************************************************************************************************************************************************


void StartScene()
{
	previousScene = currentScene;
	//currentScene = 1;
	stage = 0;
	counter = 0;
	treeCounter = 0;
	porchCounter = 0;

	SetStripsBrightness(255);

	//SetColour(&ground, 0, 0, 0);
	//ground.show();
} // StartScene ***************************************************************************************************************************************************************************************************************************************


void NextScene()
{
	previousScene = currentScene;
	//currentScene++;
	sceneDir = 1;
	stage = 0;
	counter = 0;

	treeCounter = 0;
	treeDir = 1;
	treeStage = 0;

	porchCounter = 0;
	porchDir = 1;
	porchStage = 0;
	porchX = 0;
	porchY = 0;

	sceneMillis = currentMillis;
	previousTree = currentMillis;

	//SetColour(&ground, 0, 0, 0);
	//ground.show();
} // NextScene ***************************************************************************************************************************************************************************************************************************************


bool NewScene()
{
	if (previousScene == currentScene)
		return false;

	previousScene = currentScene;

	return true;
} // NewScene ***************************************************************************************************************************************************************************************************************************************


void Action4()
{
	if (currentMillis - previousMillis > gap)
	{
		previousMillis = currentMillis;

		counter += 8;

		if (counter > MAX)
		{
			NextScene();
		}
		else
		{
			int level = counter;
			SetStrips(level, 0, 0);
			ShowStrips();
		}
	}

} // Action4 ***************************************************************************************************************************************************************************************************************************************


void Action5()
{
	if (currentMillis - previousMillis > gap)
	{
		previousMillis = currentMillis;

		counter += 8;

		if (counter > MAX)
		{
			NextScene();
		}
		else
		{
			int level = MAX - counter;
			SetStrips(level, 0, 0);
			ShowStrips();
		}
	}

} // Action5 ***************************************************************************************************************************************************************************************************************************************


void Action6()
{
	if (currentMillis - previousMillis > gap)
	{
		previousMillis = currentMillis;

		counter += 8;

		if (++counter > MAX)
		{
			NextScene();
		}
		else
		{
			int level = counter;
			SetStrips(0, level, 0);
			ShowStrips();
		}
	}

} // Action6 ***************************************************************************************************************************************************************************************************************************************


void Action7()
{
	if (currentMillis - previousMillis > gap)
	{
		previousMillis = currentMillis;

		counter += 8;

		if (++counter > MAX)
		{
			NextScene();
		}
		else
		{
			int level = MAX - counter;
			SetStrips(0, level, 0);
			ShowStrips();
		}
	}

} // Action7 ***************************************************************************************************************************************************************************************************************************************


void Action8()
{
	if (currentMillis - previousMillis > gap)
	{
		previousMillis = currentMillis;

		counter += 8;

		if (++counter > MAX)
		{
			NextScene();
		}
		else
		{
			int level = counter;
			SetStrips(0, 0, level);
			ShowStrips();
		}
	}

} // Action8 ***************************************************************************************************************************************************************************************************************************************


void Action9()
{
	if (currentMillis - previousMillis > gap)
	{
		previousMillis = currentMillis;

		counter += 8;

		if (++counter > MAX)
		{
			NextScene();
		}
		else
		{
			int level = MAX - counter;
			SetStrips(0, 0, level);
			ShowStrips();
		}
	}

} // Action9 ***************************************************************************************************************************************************************************************************************************************




void SetPorchRow(int row, int red, int green, int blue)
{
	uint32_t colour = porch.Color(red, green, blue);

	SetPorchRow(row, colour);
} // SetPorchRow ****************************************************************************************************************************************************************************************************************************


void SetPorchRow(int row, uint32_t colour)
{
	if (row >= 0 & row <= 8)
	{
		for (int x = 0; x < 50; x++)
		{
			int p = (row * 50) + x;
			porch.setPixelColor(p, colour);
		}
	}
} // SetPorchRow ****************************************************************************************************************************************************************************************************************************


void SetPorchColumn(int column, int red, int green, int blue)
{
	uint32_t colour = porch.Color(red, green, blue);
	SetPorchColumn(column, colour);
} // SetPorchColumn ****************************************************************************************************************************************************************************************************************************


void SetPorchColumn(int column, uint32_t colour)
{
	if (column >= 0 & column <= 49)
	{
		for (int y = 0; y < 9; y++)
		{
			//int p = (y * 50) + column;
			//SetPorchPixel(p, colour);
			SetPorchPixel(column, y, colour);
		}
	}
} // SetPorchColumn ****************************************************************************************************************************************************************************************************************************


void SetPorchPixel(int x, int y, int red, int green, int blue)
{
	uint32_t colour = porch.Color(red, green, blue);
	SetPorchPixel(x, y, colour);
} // SetPorchPixel ****************************************************************************************************************************************************************************************************************************


void SetPorchPixel(int x, int y, uint32_t colour)
{
	if (x >= 0 && x <= 49 && y >= 0 && y <= 9)
	{
		int p = y * 50;

		if (y == 1 || y == 3 || y == 5 || y == 7)
			p += x;
		else
			p += (49 - x);

		porch.setPixelColor(p, colour);
	}
} // SetPorchPixel ****************************************************************************************************************************************************************************************************************************


void SetPorchPixel(int pixelIndex, int red, int green, int blue)
{
	uint32_t colour = porch.Color(red, green, blue);
	SetPorchPixel(pixelIndex, colour);
} // SetPorchPixel ****************************************************************************************************************************************************************************************************************************


void SetPorchPixel(int pixelIndex, uint32_t colour)
{
	// Virtual
	// 8				400	401	402	403	404	405	406	407	408	409	410	411	412	413	414	415	416	417	418	419	420	421	422	423	424	425	426	427	428	429	430	431	432	433	434	435	436	437	438	439	440	441	442	443	444	445	446	447	448	449
	// 7				350	351	352	353	354	355	356	357	358	359	360	361	362	363	364	365	366	367	368	369	370	371	372	373	374	375	376	377	378	379	380	381	382	383	384	385	386	387	388	389	390	391	392	393	394	395	396	397	398	399
	// 6				300	301	302	303	304	305	306	307	308	309	310	311	312	313	314	315	316	317	318	319	320	321	322	323	324	325	326	327	328	329	330	331	332	333	334	335	336	337	338	339	340	341	342	343	344	345	346	347	348	349
	// 5				250	251	252	253	254	255	256	257	258	259	260	261	262	263	264	265	266	267	268	269	270	271	272	273	274	275	276	277	278	279	280	281	282	283	284	285	286	287	288	289	290	291	292	293	294	295	296	297	298	299
	// 4				200	201	202	203	204	205	206	207	208	209	210	211	212	213	214	215	216	217	218	219	220	221	222	223	224	225	226	227	228	229	230	231	232	233	234	235	236	237	238	239	240	241	242	243	244	245	246	247	248	249
	// 3				150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199
	// 2				100	101	102	103	104	105	106	107	108	109	110	111	112	113	114	115	116	117	118	119	120	121	122	123	124	125	126	127	128	129	130	131	132	133	134	135	136	137	138	139	140	141	142	143	144	145	146	147	148	149
	// 1				050	051	052	053	054	055	056	057	058	059	060	061	062	063	064	065	066	067	068	069	070	071	072	073	074	075	076	077	078	079	080	081	082	083	084	085	086	087	088	089	090	091	092	093	094	095	096	097	098	099
	// 0				000	001	002	003	004	005	006	007	008	009	010	011	012	013	014	015	016	017	018	019	020	021	022	023	024	025	026	027	028	029	030	031	032	033	034	035	036	037	038	039	040	041	042	043	044	045	046	047	048	049

	// Physical
	// 8  449 400  <	449	448	447	446	445	444	443	442	441	440	439	438	437	436	435	434	433	432	431	430	429	428	427	426	425	424	423	422	421	420	419	418	417	416	415	414	413	412	411	410	409	408	407	406	405	404	403	402	401	400
	// 7  350 399  >	350	351	352	353	354	355	356	357	358	359	360	361	362	363	364	365	366	367	368	369	370	371	372	373	374	375	376	377	378	379	380	381	382	383	384	385	386	387	388	389	390	391	392	393	394	395	396	397	398	399
	// 6  349 300  <	349	348	347	346	345	344	343	342	341	340	339	338	337	336	335	334	333	332	331	330	329	328	327	326	325	324	323	322	321	320	319	318	317	316	315	314	313	312	311	310	309	308	307	306	305	304	303	302	301	300
	// 5  250 299  >	250	251	252	253	254	255	256	257	258	259	260	261	262	263	264	265	266	267	268	269	270	271	272	273	274	275	276	277	278	279	280	281	282	283	284	285	286	287	288	289	290	291	292	293	294	295	296	297	298	299
	// 4  249 200  <	249	248	247	246	245	244	243	242	241	240	239	238	237	236	235	234	233	232	231	230	229	228	227	226	225	224	223	222	221	220	219	218	217	216	215	214	213	212	211	210	209	208	207	206	205	204	203	202	201	200
	// 3  150 199  >	150	151	152	153	154	155	156	157	158	159	160	161	162	163	164	165	166	167	168	169	170	171	172	173	174	175	176	177	178	179	180	181	182	183	184	185	186	187	188	189	190	191	192	193	194	195	196	197	198	199
	// 2  149 100  <	149	148	147	146	145	144	143	142	141	140	139	138	137	136	135	134	133	132	131	130	129	128	127	126	125	124	123	122	121	120	119	118	117	116	115	114	113	112	111	110	109	108	107	106	105	104	103	102	101	100
	// 1  050 099  >	050	051	052	053	054	055	056	057	058	059	060	061	062	063	064	065	066	067	068	069	070	071	072	073	074	075	076	077	078	079	080	081	082	083	084	085	086	087	088	089	090	091	092	093	094	095	096	097	098	099
	// 0  049 000  <	049	048	047	046	045	044	043	042	041	040	039	038	037	036	035	034	033	032	031	030	029	028	027	026	025	024	023	022	021	020	019	018	017	016	015	014	013	012	011	010	009	008	007	006	005	004	003	002	001	000

	//

	if (pixelIndex >= 0 && pixelIndex <= 49)
	{
		pixelIndex = 49 - pixelIndex;
		porch.setPixelColor(pixelIndex, colour);
	}
	else if (pixelIndex >= 50 && pixelIndex <= 99)
	{
		porch.setPixelColor(pixelIndex, colour);
	}
	else if (pixelIndex >= 100 && pixelIndex <= 149)
	{
		pixelIndex = 149 - pixelIndex;
		porch.setPixelColor(pixelIndex, colour);
	}
	else if (pixelIndex >= 150 && pixelIndex <= 199)
	{
		porch.setPixelColor(pixelIndex, colour);
	}
	else if (pixelIndex >= 200 && pixelIndex <= 249)
	{
		pixelIndex = 249 - pixelIndex;
		porch.setPixelColor(pixelIndex, colour);
	}
	else if (pixelIndex >= 250 && pixelIndex <= 299)
	{
		porch.setPixelColor(pixelIndex, colour);
	}
	else if (pixelIndex >= 300 && pixelIndex <= 349)
	{
		pixelIndex = 349 - pixelIndex;
		porch.setPixelColor(pixelIndex, colour);
	}
	else if (pixelIndex >= 350 && pixelIndex <= 399)
	{
		porch.setPixelColor(pixelIndex, colour);
	}
	else if (pixelIndex >= 400 && pixelIndex <= 449)
	{
		pixelIndex = 449 - pixelIndex;
		porch.setPixelColor(pixelIndex, colour);
	}

} // SetPorchPixel ****************************************************************************************************************************************************************************************************************************


void PorchSparkle()
{
	if (currentMillis - previousPorch > 100)
	{
		previousPorch = currentMillis;

		if (porchCounter++ == 0)
		{
			SetColour(&porch, 40, 40, 40);
		}

		for (int i = 0; i < 80; i++)
		{
			int on = random(0, PORCH_PIXELS);
			int med = random(0, PORCH_PIXELS);
			int off = random(0, PORCH_PIXELS);

			porch.setPixelColor(off, 40, 40, 40);
			porch.setPixelColor(med, 110, 110, 110);
			porch.setPixelColor(on, 200, 200, 200);

		}

		porch.show();
	}
} // PorchSparkle ***************************************************************************************************************************************************************************************************************************************


void PorchSnow()
{
	if (currentMillis - previousPorch > 100)
	{
		previousPorch = currentMillis;

		porch.show();
	}
} // PorchSnow ***************************************************************************************************************************************************************************************************************************************


void PorchCalibrate()
{
	if (currentMillis - previousPorch > 100)
	{
		previousPorch = currentMillis;

		if (porchCounter++ == 0)
		{
			SetColour(&porch, 0, 0, 0);

			uint32_t w = porch.Color(200, 200, 200);
			uint32_t r = porch.Color(200, 0, 0);
			uint32_t g = porch.Color(0, 200, 0);

			SetPorchColumn(24, r);
			SetPorchColumn(25, g);

			SetPorchColumn(0, w);
			SetPorchColumn(9, w);
			SetPorchColumn(19, w);
			SetPorchColumn(29, w);
			SetPorchColumn(39, w);
			SetPorchColumn(49, w);

			SetPorchRow(8, w);
			//SetPorchRow(7, w);
			//SetPorchRow(6, w);
			//SetPorchRow(5, w);
			SetPorchRow(4, w);
			//SetPorchRow(3, w);
			//SetPorchRow(2, w);
			//SetPorchRow(1, w);
			SetPorchRow(0, w);

			porch.show();
		}
	}
} // PorchCalibrate ***************************************************************************************************************************************************************************************************************************************


void PorchSliders()
{
	if (currentMillis - previousPorch > 40)
	{
		previousPorch = currentMillis;

		//if (porchCounter++ == 0)
		//{
		//	SetColour(&porch, 0, 0, 0);
		//}

		SetColour(&porch, 0, 0, 0);

		uint32_t white = porch.Color(MAX, MAX, MAX);

		int p = porchCounter;
		for (int i = 0; i < 10; i++)
		{
			for (int s = 0; s < 5; s++)
			{
				int p = (i * 7) - 10 + porchCounter + s;
				SetPorchPixel(p + 0, 0, white);
				SetPorchPixel(p + 7, 1, white);
				SetPorchPixel(p + 0, 2, white);
				SetPorchPixel(p + 7, 3, white);
				SetPorchPixel(p + 0, 4, white);
				SetPorchPixel(p + 7, 5, white);
				SetPorchPixel(p + 0, 6, white);
				SetPorchPixel(p + 7, 7, white);
				SetPorchPixel(p + 0, 8, white);
			}

		}

		porch.show();

		if (++porchCounter > 7)
			porchCounter = 0;

	}
} // PorchSliders ***************************************************************************************************************************************************************************************************************************************


void PorchBerries()
{
	if (currentMillis - previousPorch > 200)
	{
		previousPorch = currentMillis;

		if (porchCounter == 0)
		{
			SetColour(&porch, 40, 0, 0);
		}

		for (int i = 0; i < 60; i++)
		{
			int l = random(0, PORCH_PIXELS);
			int h = random(0, PORCH_PIXELS);

			porch.setPixelColor(l, 40, 0, 0);
			porch.setPixelColor(h, 110, 0, 0);
		}

		porch.show();
	}
} // PorchBerries ***************************************************************************************************************************************************************************************************************************************


void PorchWhiteOut()
{
	if (currentMillis - previousPorch > 3)
	{
		previousPorch = currentMillis;

		if (porchCounter++ == 0)
		{
			SetColour(&porch, 0, 0, 0);
		}

		for (int i = 0; i < 40; i++)
		{
			int colour = 0;
			int on = 0;
			int max = 0;

			while (colour == 0 && max++ < 50)
			{
				on = random(0, PORCH_PIXELS);
				colour = porch.getPixelColor(on);
			}

			porch.setPixelColor(on, MAX, MAX, MAX);

		}

		porch.show();
	}
} // PorchWhiteOut ***************************************************************************************************************************************************************************************************************************************


void PorchBlackOut()
{
	if (currentMillis - previousPorch > 5)
	{
		previousPorch = currentMillis;

		if (porchCounter++ == 0)
		{
			SetColour(&porch, MAX, MAX, MAX);
		}

		for (int i = 0; i < 40; i++)
		{
			int colour = 255;
			int on = 0;
			int max = 0;

			while (colour != 0 && max++ < 50)
			{
				on = random(0, PORCH_PIXELS);
				colour = porch.getPixelColor(on);
			}

			porch.setPixelColor(on, 0, 0, 0);

		}

		porch.show();
	}
} // PorchBlackOut ***************************************************************************************************************************************************************************************************************************************


// like to hands of fingers pulling apart
void PorchFingers()
{
	// 0    0 - 49
	// 1   50 - 99
	// 2  100 - 149
	// 3  150 - 199
	// 4  200 - 249
	// 5  250 - 299  
	// 6  300 - 349
	// 7  350 - 399  
	// 8  400 - 449


	if (currentMillis - previousPorch > 120)
	{
		previousPorch = currentMillis;

		if (porchStage == 0)
		{
			SetColour(&porch, MAX, MAX, MAX);
			porchStage = 1;
		}
		else
		{
			uint32_t colour = porch.Color(0, 0, 0);

			for (int y = 0; y < 9; y++)
			{
				int p = (y * 50) + porchCounter;
				porch.setPixelColor(p, colour);
			}

		}


		/*
		for (int y = 0; y < 9; y++)
		{
		//if (porchStage++ > 11)
		//porchStage = 1;

		//uint32_t colour = StageColour(&porch, porchStage);

		uint32_t colour = porch.Color(0, 0, 0);

		for (int x = 0; x < 50; x++)
		{
		int p = (x * 50) + y + porchCounter;

		for (int i = 0; i < 9; i++)
		{
		porch.setPixelColor(p, colour);
		}

		}
		}

		porchCounter += porchDir;

		if (porchCounter > 50)
		{
		porchDir = -1;
		}
		else if (porchCounter < 0)
		{
		porchDir = +1;
		}

		*/

		if (++porchCounter > 50)
			porchCounter = 0;


		porch.show();

	}
} // PorchFingers ***************************************************************************************************************************************************************************************************************************************


void PorchWipe()
{
	if (currentMillis - previousPorch > 30)
	{
		previousPorch = currentMillis;

		if (porchX++ == 0)
		{
			porchY = 1;// random(1, 4);
		}

		uint32_t colour = StageColour(&porch, porchStage);

		if (porchY == 1) // Upwards
		{
			SetPorchRow(porchCounter, colour);

			if (++porchCounter > 9)
			{
				porchStage++;
				porchCounter = 0;
				porchY = 2;
			}
		}
		else if (porchY == 2) // Left to Right
		{
			SetPorchColumn(porchCounter, colour);

			if (++porchCounter > 49)
			{
				porchStage++;
				porchCounter = 9;
				porchY = 3;
			}

		}
		else if (porchY == 3) // Downwards
		{
			SetPorchRow(porchCounter, colour);

			if (--porchCounter < 0)
			{
				porchStage++;
				porchCounter = 49;
				porchY = 4;
			}

		}
		else if (porchY == 4) // Right to Left
		{
			SetPorchColumn(porchCounter, colour);

			if (--porchCounter < 0)
			{
				porchStage++;
				porchCounter = 0;
				porchY = 1;
			}

		}

		if (porchStage > 11)
			porchStage = 0;

		porch.show();
	}

} // PorchWipe ***************************************************************************************************************************************************************************************************************************************


// vertical bars
void PorchVert()
{
	if (currentMillis - previousPorch > 40)
	{
		previousPorch = currentMillis;

		SetColour(&porch, 20, 20, 20);

		//for (int i = 0; i < 9; i++)
		//{
		//	int p = (i * 50) + porchCounter;
		//	porch.setPixelColor(p, 200, 200, 200);
		//}

		SetPorchColumn(porchCounter, 0, MAX, 0);

		porchCounter += porchDir;

		if (porchCounter > 49)
		{
			porchDir = -1;
		}
		else if (porchCounter < 0)
		{
			porchDir = +1;
		}

		porch.show();
	}
} // PorchVert ***************************************************************************************************************************************************************************************************************************************


// horizontal bars
void PorchHorz()
{
	// 0    0 - 49
	// 1   50 - 99
	// 2  100 - 149
	// 3  150 - 199
	// 4  200 - 249
	// 5  250 - 299  
	// 6  300 - 349
	// 7  350 - 399  
	// 8  400 - 449

	if (currentMillis - previousPorch > 60)
	{
		previousPorch = currentMillis;

		SetColour(&porch, 20, 20, 20);

		//for (int i = 0; i < 9; i++)
		//{
		//			porch.setPixelColor((porchCounter * 50) + i, 200, 200, 200);
		//	}

		SetPorchRow(porchCounter, MAX, MAX, MAX);

		porchCounter += porchDir;

		if (porchCounter > 8)
		{
			porchDir = -1;
		}
		else if (porchCounter < 0)
		{
			porchDir = +1;
		}

		porch.show();
	}
} // PorchHorz ***************************************************************************************************************************************************************************************************************************************


void PorchFader()
{
	if (currentMillis - previousPorch > 70)
	{
		previousPorch = currentMillis;

		porchCounter += porchDir;

		if (porchCounter >= 100)
		{
			porchDir = -1;
		}
		else if (porchCounter <= 10)
		{
			porchDir = +1;
		}

		SetColour(&porch, porchCounter, porchCounter, porchCounter);

		porch.show();
	}
} // PorchFader ***************************************************************************************************************************************************************************************************************************************


// dividing bars, from centre out to edge
void PorchDivider()
{
	if (currentMillis - previousPorch > 20)
	{
		previousPorch = currentMillis;

		if (porchCounter == 0)
		{
			SetColour(&porch, 0, 0, 0);
		}

		uint32_t colour = StageColour(&porch, porchStage);

		for (int line = 0; line < 9; line++)
		{
			int middle = (line * 50) + 25;
			porch.setPixelColor(middle - porchCounter, colour);
			porch.setPixelColor(middle, colour);
			porch.setPixelColor(middle + porchCounter, colour);
		}

		/*
		if (stage == 0)
		Divider(MAX, 0, 0); // red
		else if (stage == 1)
		Divider(125, 38, 205); // purple
		else if (stage == 2)
		Divider(0, MAX, 0); // green
		else if (stage == 3)
		Divider(0, 0, MAX); // blue
		else if (stage == 4)
		Divider(238, 201, 0); // yellow gold
		else if (stage == 5)
		Divider(0, 205, 205); // cyan
		else if (stage == 6)
		Divider(255, 20, 147); // pink
		else if (stage == 7)
		Divider(255, 128, 0); // orange
		else if (stage == 8)
		Divider(150, 150, 150); // white
		*/

		porch.show();

		porchCounter++;
		if (porchCounter > 25)
		{
			porchCounter = 1;

			porchStage++;
			if (porchStage > 9)
				porchStage = 0;
		}
	}
} // PorchDivider ****************************************************************************************************************************************************************************************************************************


// rainbow, each pixel is different
void PorchRainbowPixel()
{
	if (currentMillis - previousPorch > 280)
	{
		previousPorch = currentMillis;

		for (int i = 0; i < PORCH_PIXELS; i++)
		{
			if (porchCounter++ > 256)
				porchCounter = 0;

			porch.setPixelColor(i, Wheel(&porch, porchCounter));
		}

		porch.show();
	}
} // PorchRainbowPixel ****************************************************************************************************************************************************************************************************************************


// rainbox, all pixels using the same colour
void PorchRainbowAll()
{
	if (currentMillis - previousPorch > 70)
	{
		previousPorch = currentMillis;

		if (porchCounter++ > 256)
			porchCounter = 0;

		SetColour(&porch, Wheel(&porch, porchCounter));

		porch.show();
	}
} // PorchRainbowAll ****************************************************************************************************************************************************************************************************************************


// rainbow, another type
void PorchRainbowVert()
{
	if (currentMillis - previousPorch > 120)
	{
		previousPorch = currentMillis;

		for (int x = 0; x < 50; x++)
		{
			if (porchCounter++ > 256)
				porchCounter = 0;

			uint32_t colour = Wheel(&porch, porchCounter);

			for (int y = 0; y < 9; y++)
			{
				//int p = (x * 50) + y;

				SetPorchPixel(x, y, colour);
				//porch.setPixelColor(p, colour);
			}
		}

		/*
		porchCounter += porchDir;

		if (porchCounter > 50)
		{
		porchDir = -1;
		}
		else if (porchCounter < 0)
		{
		porchDir = +1;
		}
		*/

		porch.show();
	}

} // PorchRainbowVert ***************************************************************************************************************************************************************************************************************************************


void PorchBoxes()
{
	if (currentMillis - previousPorch > 320)
	{
		previousPorch = currentMillis;

		if (porchCounter == 0)
		{
			SetColour(&porch, MIN, MIN, MIN);
		}
		else
		{
			uint32_t colour = StageColour(&porch, porchStage);

			SetPorchColumn(0 + porchCounter, colour);
			SetPorchColumn(49 - porchCounter, colour);

			SetPorchRow(0 + porchCounter, colour);
			SetPorchRow(9 - porchCounter, colour);

			if (porchStage++ > 8)
				porchStage = 0;
		}

		if (++porchCounter > 5)
			porchCounter = 0;

		/*
		porchCounter += porchDir;

		if (porchCounter > 50)
		{
		porchDir = -1;
		}
		else if (porchCounter < 0)
		{
		porchDir = +1;
		}
		*/

		porch.show();
	}

} // PorchBoxes ***************************************************************************************************************************************************************************************************************************************


// moving block around the grid
void PorchBlockOut()
{
	if (currentMillis - previousPorch > 80)
	{
		previousPorch = currentMillis;

		if (porchStage == 0)
		{
			porchStage = 1;

			porchXdir = 1;
			porchYdir = 1;

			porchX = random(15, 35);
			porchY = random(2, 6);

		}
		else
		{
			SetColour(&porch, 20, 20, 20);

			porchX += porchXdir;

			if (porchX > 49)
			{
				porchXdir = -1;
			}
			else if (porchX < 0)
			{
				porchXdir = +1;
			}

			porchY += porchYdir;

			if (porchY > 9)
			{
				porchYdir = -1;
			}
			else if (porchY < 0)
			{
				porchYdir = +1;
			}

			//

			//SetColour(&porch, 0, 20, 0);

			//int p = (porchY * 50) + porchX;
			//SetPorchPixel(p + 0, 120, 0, 0);
			//  2222
			//  2012
			//  2112
			//  2222

			uint32_t colour = porch.Color(120, 0, 0);
			SetPorchPixel(porchX, porchY, colour);
			SetPorchPixel(porchX + 1, porchY, colour);
			SetPorchPixel(porchX, porchY + 1, colour);
			SetPorchPixel(porchX + 1, porchY + 1, colour);

			colour = porch.Color(60, 0, 0);
			SetPorchPixel(porchX - 1, porchY + 1, colour);
			SetPorchPixel(porchX - 0, porchY + 1, colour);
			SetPorchPixel(porchX + 1, porchY + 1, colour);
			SetPorchPixel(porchX + 2, porchY + 1, colour);
			SetPorchPixel(porchX - 1, porchY, colour);
			SetPorchPixel(porchX + 2, porchY, colour);
			SetPorchPixel(porchX - 1, porchY - 1, colour);
			SetPorchPixel(porchX + 2, porchY - 1, colour);
			SetPorchPixel(porchX - 1, porchY - 2, colour);
			SetPorchPixel(porchX - 0, porchY - 2, colour);
			SetPorchPixel(porchX + 1, porchY - 2, colour);
			SetPorchPixel(porchX + 2, porchY - 2, colour);
		}

		porch.show();
	}
} // PorchBlockOut ***************************************************************************************************************************************************************************************************************************************


void PorchWave()
{
	if (currentMillis - previousPorch > 30)
	{
		previousPorch = currentMillis;

		SetColour(&porch, 0, 0, 60);

		for (int y = 0; y < 9; y++)
		{
			SetPorchPixel(porchCounter - 5, y, 0, 0, 70);
			SetPorchPixel(porchCounter - 4, y, 0, 0, 80);
			SetPorchPixel(porchCounter - 3, y, 0, 0, 90);
			SetPorchPixel(porchCounter - 2, y, 0, 0, 100);
			SetPorchPixel(porchCounter - 1, y, 0, 0, 130);
			SetPorchPixel(porchCounter + 0, y, 0, 0, 160);
			SetPorchPixel(porchCounter + 1, y, 0, 0, 110);
			SetPorchPixel(porchCounter + 2, y, 0, 0, 130);
			SetPorchPixel(porchCounter + 3, y, 0, 0, 90);
			SetPorchPixel(porchCounter + 4, y, 0, 0, 80);
			SetPorchPixel(porchCounter + 5, y, 0, 0, 70);
		}

		porchCounter += porchDir;

		if (porchCounter > 49)
		{
			porchDir = -1;
		}
		else if (porchCounter < 0)
		{
			porchDir = +1;
		}

		porch.show();
	}
} // PorchWave ***************************************************************************************************************************************************************************************************************************************


void PorchStarTurn()
{
	if (currentMillis - previousPorch > 600)
	{
		previousPorch = currentMillis;

		//ProcessPorchArray(porchStars);
		//SetColour(&porch, 0, 0, 0);

		//for (int i = 0; i < 10; i++)
		//{
		//	int pos = porchStars[porchCounter][i];
		//	if (pos >= 0)
		//		porch.setPixelColor(pos, 200, 200, 200);
		//}

		//porch.show();

		//if (++porchCounter > 10)
		//{
		//	porchCounter = 0;
		//}
	}
} // PorchStarTurn ***************************************************************************************************************************************************************************************************************************************


void PorchTree()
{
	if (currentMillis - previousPorch > 300)
	{
		previousPorch = currentMillis;

		//if (porchCounter == 0)
		//{
		SetColour(&porch, 0, 0, 0);

		uint32_t red = porch.Color(200, 0, 0);
		uint32_t green = porch.Color(0, 200, 0);
		uint32_t blue = porch.Color(0, 0, 200);

		PorchTree(porchCounter + 5, 0, green);

		PorchTree(porchCounter + 20, 0, green);

		PorchTree(porchCounter + 35, 0, green);

		porch.show();
		//}

		if (++porchCounter > 49)
			porchCounter = 0;

	}

} // PorchTree ***************************************************************************************************************************************************************************************************************************************


void PorchTree(int xOffset, int yOffset, uint32_t colour)
{
	// 0	{ 0, 0, 0, 0, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	SetPorchPixel(xOffset + 4, yOffset + 0, colour);
	SetPorchPixel(xOffset + 5, yOffset + 0, colour);
	SetPorchPixel(xOffset + 6, yOffset + 0, colour);

	// 1	{ 0, 8, 8, 8, 8, 8, 8, 8, 8, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	SetPorchPixel(xOffset + 1, yOffset + 1, colour);
	SetPorchPixel(xOffset + 2, yOffset + 1, colour);
	SetPorchPixel(xOffset + 3, yOffset + 1, colour);
	SetPorchPixel(xOffset + 4, yOffset + 1, colour);
	SetPorchPixel(xOffset + 5, yOffset + 1, colour);
	SetPorchPixel(xOffset + 6, yOffset + 1, colour);
	SetPorchPixel(xOffset + 7, yOffset + 1, colour);
	SetPorchPixel(xOffset + 8, yOffset + 1, colour);
	SetPorchPixel(xOffset + 9, yOffset + 1, colour);

	// 2	{ 0, 0, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	SetPorchPixel(xOffset + 2, yOffset + 2, colour);
	SetPorchPixel(xOffset + 3, yOffset + 2, colour);
	SetPorchPixel(xOffset + 4, yOffset + 2, colour);
	SetPorchPixel(xOffset + 5, yOffset + 2, colour);
	SetPorchPixel(xOffset + 6, yOffset + 2, colour);
	SetPorchPixel(xOffset + 7, yOffset + 2, colour);
	SetPorchPixel(xOffset + 8, yOffset + 2, colour);

	// 3	{ 0, 0, 0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	SetPorchPixel(xOffset + 3, yOffset + 3, colour);
	SetPorchPixel(xOffset + 4, yOffset + 3, colour);
	SetPorchPixel(xOffset + 5, yOffset + 3, colour);
	SetPorchPixel(xOffset + 6, yOffset + 3, colour);
	SetPorchPixel(xOffset + 7, yOffset + 3, colour);

	// 4	{ 0, 0, 0, 0, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	SetPorchPixel(xOffset + 4, yOffset + 4, colour);
	SetPorchPixel(xOffset + 5, yOffset + 4, colour);
	SetPorchPixel(xOffset + 6, yOffset + 4, colour);

	// 5	{ 0, 0, 4, 4, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	SetPorchPixel(xOffset + 2, yOffset + 5, colour);
	SetPorchPixel(xOffset + 3, yOffset + 5, colour);
	SetPorchPixel(xOffset + 4, yOffset + 5, colour);
	SetPorchPixel(xOffset + 5, yOffset + 5, colour);
	SetPorchPixel(xOffset + 6, yOffset + 5, colour);

	// 6	{ 0, 0, 0, 3, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	SetPorchPixel(xOffset + 3, yOffset + 6, colour);
	SetPorchPixel(xOffset + 4, yOffset + 6, colour);
	SetPorchPixel(xOffset + 5, yOffset + 6, colour);
	SetPorchPixel(xOffset + 6, yOffset + 6, colour);
	SetPorchPixel(xOffset + 7, yOffset + 6, colour);

	// 7	{ 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	SetPorchPixel(xOffset + 4, yOffset + 7, colour);
	SetPorchPixel(xOffset + 5, yOffset + 7, colour);
	SetPorchPixel(xOffset + 6, yOffset + 7, colour);

	// 8	{ 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
	SetPorchPixel(xOffset + 5, yOffset + 8, colour);

} // PorchTree ***************************************************************************************************************************************************************************************************************************************



//void PorchSpiral()
//{
//	if (currentMillis - previousPorch > 10)
//	{
//		previousPorch = currentMillis;
//
//		if (porchCounter++ == 0)
//		{
//			SetColour(&porch, 0, 0, 0);
//		}
//		else if (porchCounter > 451)
//		{
//			porchCounter = 1;
//
//			if (++porchStage>11)
//				porchStage = 1;
//		}
//		else
//		{
//			uint32_t colour = StageColour(&porch, porchStage);
//
//			ProcessPorchArray(patternSpiral, porchCounter, colour,0,0);
//		}
//
//		porch.show();
//
//	}
//
//} // PorchSpiral ***************************************************************************************************************************************************************************************************************************************


void PorchSleigh()
{
	if (currentMillis - previousPorch > 300)
	{
		previousPorch = currentMillis;

		if (porchCounter++ == 0)
		{
		}
		else if (porchCounter > 90)
		{
			porchCounter = 0;
		}
		else
		{
			SetColour(&porch, 0, 0, 0);
			ProcessPorchArray(patternSleigh, 1, 180, 180, 180, 50 - porchCounter, 0);
			ProcessPorchArray(patternSleigh, 2, 200, 0, 0, 50 - porchCounter, 0);
		}

		porch.show();
	}

} // PorchSleigh ***************************************************************************************************************************************************************************************************************************************



/*



void PorchShimmer()
{
if (currentMillis - previousPorch > 80)
{
previousPorch = currentMillis;

if (porchCounter++ == 0)
{
SetColour(&porch, 20, 0, 0);
}
else if (porchCounter > 91)
{
porchCounter = 0;
}
else
{
ProcessPorchArray(patternShimmer, porchCounter, 0, 120, 0);
ProcessPorchArray(patternShimmer, porchCounter - 10, 0, 90, 0);
ProcessPorchArray(patternShimmer, porchCounter - 20, 0, 60, 0);
ProcessPorchArray(patternShimmer, porchCounter - 30, 0, 30, 0);
ProcessPorchArray(patternShimmer, porchCounter - 40, 0, 10, 0);
}

porch.show();
}

} // PorchShimmer ***************************************************************************************************************************************************************************************************************************************



void PorchDropping()
{
if (currentMillis - previousPorch > 100)
{
previousPorch = currentMillis;

if (porchCounter++ == 0)
{
SetColour(&porch, 40, 0, 0);
}
else if (porchCounter > 60)
{
porchCounter = 0;
}
else
{
ProcessPorchArray(patternDropping, porchCounter, 0, 40, 0);
}

porch.show();
}

} // PorchDropping ***************************************************************************************************************************************************************************************************************************************



void PorchTree()
{
if (currentMillis - previousPorch > 300)
{
previousPorch = currentMillis;

if (porchCounter++ == 0)
{
SetColour(&porch, 0, 0, 0);
}
else if (porchCounter > 70)
{
porchCounter = 0;
}
else
{
ProcessPorchArray(patternDropping, 999, 0, 40, 0, porchCounter, 0);
}

porch.show();
}

} // PorchTree ***************************************************************************************************************************************************************************************************************************************



*/


void ProcessPorchArray(byte  pixels[][50], int index, int r, int g, int b)
{
	ProcessPorchArray(pixels, index, r, g, b, 0, 0);
} // ProcessPorchArray ***************************************************************************************************************************************************************************************************************************************


void ProcessPorchArray(byte   pixels[][50], int index, int r, int g, int b, int offsetX, int offsetY)
{
	uint32_t colour = porch.Color(r, g, b);
	ProcessPorchArray(pixels, index, colour, 0, 0);
} // ProcessPorchArray ***************************************************************************************************************************************************************************************************************************************


void ProcessPorchArray(byte  pixels[][50], int index, uint32_t colour, int offsetX, int offsetY)
{

	if (index < 0 || index > 1000)
		return;

	for (int y = 0; y < 9; y++)
	{
		for (int x = 0; x < 50; x++)
		{
			int data = pixels[y][x]; // pixels

			if ((data == index) || (index == 999 && data != 0))
			{
				int px = x + offsetX;
				int py = y + offsetY;

				int p = ((8 - py) * 50);
				if (py == 1 || py == 3 || py == 5 || py == 7)
					p += px;
				else
					p += (49 - px);

				porch.setPixelColor(p, colour);
			}

		} // for x
	} // for y

} // ProcessPorchArray ***************************************************************************************************************************************************************************************************************************************


void StripTwinkle(Adafruit_NeoPixel *strip, int max, uint32_t lowred, uint32_t lowgreen, uint32_t lowblue, uint32_t highred, uint32_t highgreen, uint32_t highblue)
{
	int on = random(0, max);
	int off = random(0, max);

	strip->setPixelColor(off, lowred, lowgreen, lowblue);
	strip->setPixelColor(on, highred, highgreen, highblue);
} // StripTwinkle ***************************************************************************************************************************************************************************************************************************************


uint32_t StageColour(Adafruit_NeoPixel *strip, int stageNumber)
{
	uint32_t colour = 0;

	if (stageNumber == 0)
	{
		colour = strip->Color(MAX, 0, 0); // red
	}
	else if (stageNumber == 1)
	{
		colour = strip->Color(0, MAX, 0); // green
	}
	else if (stageNumber == 2)
	{
		colour = strip->Color(0, 0, MAX); // blue
	}
	else if (stageNumber == 3)
	{
		colour = strip->Color(MAX, MAX, 0);
	}
	else if (stageNumber == 4)
	{
		colour = strip->Color(0, MAX, MAX);
	}
	else if (stageNumber == 5)
	{
		colour = strip->Color(MAX, 0, MAX);
	}
	else if (stageNumber == 6)
	{
		colour = strip->Color(255, 128, 0); // orange
	}
	else if (stageNumber == 7)
	{
		colour = strip->Color(200, 20, 127); // pink 255, 20, 147
	}
	else if (stageNumber == 8)
	{
		colour = strip->Color(0, 205, 205); // cyan
	}
	else if (stageNumber == 9)
	{
		colour = strip->Color(238, 201, 0); // yellow gold
	}
	else if (stageNumber == 10)
	{
		colour = Wheel(strip, counter); // rainbow
	}
	else // if (stageNumber == 11)
	{
		colour = strip->Color(MAX, MAX, MAX); // white
	}

} // StageColour ***************************************************************************************************************************************************************************************************************************************


void Wheel(byte WheelPos, int *red, int *green, int *blue)
{
	WheelPos = 255 - WheelPos;
	if (WheelPos < 85)
	{
		*red = 255 - WheelPos * 3;
		*green = 0;
		*blue = WheelPos * 3;
	}
	else if (WheelPos < 170)
	{
		WheelPos -= 85;
		*red = 0;
		*green = WheelPos * 3;
		*blue = 255 - WheelPos * 3;
	}
	else
	{
		WheelPos -= 170;
		*red = WheelPos * 3;
		*green = 255 - WheelPos * 3;
		*blue = 0;
	}

}  // Wheel ***************************************************************************************************************************************************************************************************************************************


uint32_t Wheel(Adafruit_NeoPixel *strip, byte WheelPos)
{
	WheelPos = 255 - WheelPos;
	if (WheelPos < 85)
	{
		return strip->Color(255 - WheelPos * 3, 0, WheelPos * 3);
	}
	else if (WheelPos < 170)
	{
		WheelPos -= 85;
		return strip->Color(0, WheelPos * 3, 255 - WheelPos * 3);
	}
	else
	{
		WheelPos -= 170;
		return strip->Color(WheelPos * 3, 255 - WheelPos * 3, 0);
	}
} // Wheel ***************************************************************************************************************************************************************************************************************************************

